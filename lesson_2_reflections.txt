Lesson 2 Reflections (Bry Bartle):

What happens when you initialize a repository? Why do you need to do it?
	
	When you initialize a git repository you create a .git file in the directory 
	you are currently in. This allows you to then creat commits of the files in 
	that directory in the git repository you have just created. You need the .git 
	file to be able to track these changes because it stores the required metadata.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Staging area is where you store files that you are planning on including in 
	your next commit whereas the working directory includes both files in and 
	not in the staging area, and the repository just stores your commits - not 
	necessarily all files in the working directory because you may not commit 
	all of those files.
	The staging area offers great value because it allows you time to think and 
	visually see what is currently queued for your next commit. Thus, you can 
	look at what you are currently including and then see what logically makes 
	sense to include in that commit along with the files you already have queued.

How can you use the staging area to make sure you have one commit per logical
change?

	I can make changes in the working directory, then add whatever files I want 
	to the staging area. From here I can use git diff to make sure I'm including 
	only the changed files I want to commit in the staging area by comparying 
	my working directory files to my staging area files. I can then confirm that 
	I am only making one logical change since my last commit by using git diff 
	--staged to compare the current files in my staging area to the most recent 
	commit in my repository. This way I can see the changes that have been made 
	since my last commit and confirm that it is only one logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches can be very helpful when making different versions of the same 
	program that have different features (example an easy, average, and hard 
	version of a game). This is useful because you can do this from mostly the 
	same code and then just branch off and change one feature to change the 
	difficulty and still keep all easy, average and hard versions in different 
	branches (could also be any application, italian version of code, different 
	languages, same product tailored for different clients, etc.). This would 
	be super helpful in keeping things organized as you can keep different 
	variations of the same thing in different branches off the master branch.

How do the diagrams help you visualize the branch structure?

	The diagrams help me see where branches were started (what the parent 
	commit is) and which commits can be reached through each branch. It also 
	helps me to see if there are any unbranched and therefore unreachable 
	commits that could be lost if I don't create a branch for them (detached 
	HEADs).

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	
	When I merge 2 branches together I combine the tips of each branch into 
	a new file and it's own merge commit. This merging of the tips of each 
	branch creates a new file commit containing both the changes from each 
	branch "merged" together into a new file that includes both branch features. 
	The merged branch also allows us to access the commits from both branches 
	ordered by time stamps. This is why the diagram is useful because it shows 
	the merge commit's parent relationships with both branches and therefore 
	how you can access commits on both branches from the same merged branch 
	tip.

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?

	Pros:
	- Git does a lot of the work for you in merging the two files
	- You can work on two separate branches (or have multiple people working 
	on the two separate branches) simultaneously and then merge after
	- Saves a lot of time and makes coding as a team more efficient
	- Any aspects of the merge where both branches changed the same sections 
	of the code will be brought to the coders' attention so the coders can 
	personally resolve any conflicts instead of having Git attempt to which 
	could lead to many errors in the code for that conflict section and therefore 
	also potential errors in the functionality
	
	Cons: 
	- Still have to meet with multiple coders in person to decide how to deal 
	with merge conflicts while still maintaining all the desired functions of 
	the program. However, as stated above, given the current capabilities of 
	Git this is likely a better option than letting Git solve the difficult 
	conflicts itself as it will likely not do so properly