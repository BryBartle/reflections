When would you want to use a remote repository rather than keeping all your work
local?

    Whenever you wish to have other people view your work or you are 
    collaborating with someone else on a project and need to be able to 
    easily share and update your branch(es).

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Because you may not want all the changes that are on GitHub at that 
	point in or you may not be ready to push your most recent versions 
	and commits up to GitHub and make them public. Your code may not be 
	ready for the public yet or you may decide that you don't want to 
	show your most recent versions to the public at all.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are cloning someone else's repository from their GitHub to yours 
	(no local copy made by the fork action, must then clone fork to get local). 
	Clones are the action of cloning a repository from either GitHub or local 
	to local. Branches are the various branches within a repository. Branches 
	can be cloned but are not the actual cloning actions themselves; rather, 
	they are the objects that are cloned.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    You can compare and see what you have added locally since you last pulled 
	or fetched from GitHub. Also, if you have the last known remote state 
	stored locally you can merge it with your local master changes in case 
	the two branches are out of sync. This would allow you to work offline, 
	add features to your local master branch, and then merge both origin/master 
	and master when you are finished.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    It would be much harder to collaborate without using Git and GitHub. Would 
	have to send many files back and forth via email and it would be much much 
	more difficult to track changes and store and refer to previous or parallel 
	versions. It would also be much more tedious to merge branches.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Whenever you are creating an experimental feature that you want to test, 
	receive feedback on, and then implement while still maintaining a good 
	master copy. This is beneficial because you keep a safe master branch and 
	can still experiment and get feedback through a pull request whereas 
	changes to master must be more fundamental, sounds changes because they 
	will then likely get merged into all other branches. So other branches are 
	great for parallel work and adding new or experimental features and master 
	is great for keeping a sound, good branch for your code that you know works.
